# app.py
# Streamlit app: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ -> YOLOv8 (seg) ‡πÅ‡∏¢‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤ -> ‡∏î‡∏π‡∏î‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å -> ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏µ Complementary/Analogous/Triadic
# ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• best.pt ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏ö‡∏ö "segment" ‡πÅ‡∏•‡πâ‡∏ß (‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö app.py)

import io
import colorsys
import numpy as np
from PIL import Image
from ultralytics import YOLO
from sklearn.cluster import KMeans
import streamlit as st

# ----------------------------
# Config
# ----------------------------
st.set_page_config(page_title="AI Stylist ‚Äì Color Recommender", layout="centered")

MODEL_PATH = "best.pt"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å sidebar
DEFAULT_CONF = 0.25
DEFAULT_IOU = 0.45
DEFAULT_IMGSZ = 640

# ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™ EN -> TH
EN2TH = {
    "long_sleeved_dress": "‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏£‡∏™",
    "long_sleeved_outwear": "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏Ç‡∏ô‡∏¢‡∏≤‡∏ß",
    "long_sleeved_shirt": "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÅ‡∏Ç‡∏ô‡∏¢‡∏≤‡∏ß",
    "short_sleeved_dress": "‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏£‡∏™",
    "short_sleeved_outwear": "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏Ç‡∏ô‡∏™‡∏±‡πâ‡∏ô",
    "short_sleeved_shirt": "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÅ‡∏Ç‡∏ô‡∏™‡∏±‡πâ‡∏ô",
    "shorts": "‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏™‡∏±‡πâ‡∏ô",
    "skirt": "‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á",
    "sling": "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏™‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß",
    "sling_dress": "‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏£‡∏™",
    "trousers": "‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏¢‡∏≤‡∏ß",
    "vest": "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡πä‡∏Å",
    "vest_dress": "‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏£‡∏™",
}

# ----------------------------
# Utils: ‡∏™‡∏µ
# ----------------------------
def clamp01(x: float) -> float:
    return max(0.0, min(1.0, x))

def hsv01_to_rgb(h, s, v):
    """‡∏£‡∏±‡∏ö h,s,v ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0..1 -> ‡∏Ñ‡∏∑‡∏ô (r,g,b) 0..255 ‡πÅ‡∏•‡∏∞ hex"""
    r, g, b = colorsys.hsv_to_rgb(clamp01(h), clamp01(s), clamp01(v))
    R = int(round(r * 255))
    G = int(round(g * 255))
    B = int(round(b * 255))
    return (R, G, B), f"#{R:02X}{G:02X}{B:02X}"

def rgb255_to_hsv01(rgb):
    r, g, b = rgb
    return colorsys.rgb_to_hsv(r/255.0, g/255.0, b/255.0)  # h,s,v ‚àà [0,1]

def color_harmonies_from_rgb(rgb):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Complementary / Analogous(¬±30¬∞) / Triadic(¬±120¬∞) ‡∏à‡∏≤‡∏Å RGB"""
    h, s, v = rgb255_to_hsv01(rgb)

    # Complementary = 180¬∞
    comp_rgb, comp_hex = hsv01_to_rgb(h + 0.5, s, v)

    # Analogous ‚âà ¬±30¬∞ -> ¬±0.0833
    ana1_rgb, ana1_hex = hsv01_to_rgb(h + 0.0833, s, v)
    ana2_rgb, ana2_hex = hsv01_to_rgb(h - 0.0833, s, v)

    # Triadic = ¬±120¬∞ -> ¬±1/3
    tri1_rgb, tri1_hex = hsv01_to_rgb(h + 1/3, s, v)
    tri2_rgb, tri2_hex = hsv01_to_rgb(h - 1/3, s, v)

    return {
        "base": (rgb, f"#{rgb[0]:02X}{rgb[1]:02X}{rgb[2]:02X}"),
        "complementary": (comp_rgb, comp_hex),
        "analogous": [(ana1_rgb, ana1_hex), (ana2_rgb, ana2_hex)],
        "triadic": [(tri1_rgb, tri1_hex), (tri2_rgb, tri2_hex)],
    }

def hex_chip(hex_str: str, label: str = ""):
    st.markdown(
        f"""
        <div style="display:flex;align-items:center;gap:10px;margin:4px 0;">
          <div style="width:28px;height:28px;border-radius:6px;border:1px solid #ddd;background:{hex_str};"></div>
          <div style="font-size:0.95rem;">{label} <code style="opacity:0.8">{hex_str}</code></div>
        </div>
        """,
        unsafe_allow_html=True,
    )

# ----------------------------
# Utils: dominant color
# ----------------------------
def filter_pixels_rgb(pixels: np.ndarray) -> np.ndarray:
    """‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏µ‡∏î/‡∏Ç‡∏≤‡∏ß/‡∏î‡∏≥/‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏ö‡∏Å‡∏ß‡∏ô"""
    if pixels.size == 0:
        return pixels
    R, G, B = pixels[:, 0], pixels[:, 1], pixels[:, 2]
    # ‡∏ï‡∏±‡∏î‡∏Ç‡∏≤‡∏ß‡∏à‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡∏à‡∏±‡∏î
    not_white = ~((R > 235) & (G > 235) & (B > 235))
    not_black = ~((R < 15) & (G < 15) & (B < 15))
    # ‡∏ï‡∏±‡∏î‡πÄ‡∏ó‡∏≤ (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á R,G,B ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å)
    not_gray = ~((np.abs(R - G) < 12) & (np.abs(G - B) < 12))
    keep = not_white & not_black & not_gray
    return pixels[keep]

def dominant_color_from_masked_pixels(pixels: np.ndarray, n_clusters: int = 3):
    """
    pixels: (N,3) uint8 (RGB) ‚Äì return (rgb_tuple, hex)
    """
    if pixels.size == 0:
        return (200, 200, 200), "#C8C8C8"

    px = filter_pixels_rgb(pixels)
    if px.size == 0:
        px = pixels

    # subsample ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    if len(px) > 6000:
        idx = np.random.choice(len(px), 6000, replace=False)
        px = px[idx]

    km = KMeans(n_clusters=n_clusters, n_init=5, random_state=0)
    labels = km.fit_predict(px.astype(np.float32))
    centers = km.cluster_centers_.astype(int)
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡∏™‡∏∏‡∏î
    _, counts = np.unique(labels, return_counts=True)
    dom_idx = int(np.argmax(counts))
    rgb = tuple(int(x) for x in centers[dom_idx])
    hex_str = f"#{rgb[0]:02X}{rgb[1]:02X}{rgb[2]:02X}"
    return rgb, hex_str

# ----------------------------
# Load model (cache)
# ----------------------------
@st.cache_resource(show_spinner=False)
def load_model(path: str):
    m = YOLO(path)
    return m

# ----------------------------
# UI
# ----------------------------
st.title("üß• AI Stylist ‚Äì ‡πÅ‡∏¢‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤ ‡∏î‡∏π‡∏î‡∏™‡∏µ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏π‡πà‡∏™‡∏µ")
with st.sidebar:
    st.header("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    model_path = st.text_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (.pt)", MODEL_PATH)
    conf = st.slider("Confidence", 0.05, 0.85, DEFAULT_CONF, 0.01)
    iou = st.slider("IoU", 0.2, 0.9, DEFAULT_IOU, 0.01)
    imgsz = st.select_slider("Image size (‡∏™‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏≠)", options=[320, 480, 640, 800], value=DEFAULT_IMGSZ)
    st.caption("‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå best.pt ‡πÑ‡∏ß‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö app.py ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏ò‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
try:
    model = load_model(model_path)
except Exception as e:
    st.error(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

if getattr(model, "task", None) != "segment":
    st.warning("‚ö†Ô∏è ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà **segmentation** (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô YOLOv8-seg) ‚Äî ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ masks")
st.caption(f"‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model.names}")

uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png", "webp"])
if not uploaded:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ ‚ú®")
    st.stop()

# ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û (RGB)
img_pil = Image.open(uploaded).convert("RGB")
img_np = np.array(img_pil)

with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‚Ä¶"):
    res_list = model.predict(img_np, conf=conf, iou=iou, imgsz=imgsz, verbose=False)
res = res_list[0]

# ‡∏£‡∏π‡∏õ anotated
annot_bgr = res.plot()  # BGR
annot_rgb = annot_bgr[:, :, ::-1]  # to RGB
st.image([img_pil, annot_rgb], caption=["‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"], use_column_width=True)

if res.masks is None or res.masks.data is None or len(res.masks.data) == 0:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤ (masks) ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ")
    st.stop()

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
masks = res.masks.data.cpu().numpy()            # (N, h, w) float 0..1
H, W = img_np.shape[:2]
boxes = res.boxes
names = model.names

st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏¥‡πâ‡∏ô")
for i in range(len(masks)):
    # class / conf
    cls_id = int(boxes.cls[i].item()) if boxes.cls is not None else -1
    conf_i = float(boxes.conf[i].item()) if boxes.conf is not None else 0.0
    name_en = names.get(cls_id, f"id:{cls_id}")
    name_th = EN2TH.get(name_en, name_en)

    # mask -> resize ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
    m_small = masks[i]  # 0..1
    m_img = Image.fromarray((m_small > 0.5).astype(np.uint8) * 255)
    m_big = m_img.resize((W, H), Image.NEAREST)
    mask_bool = np.array(m_big).astype(bool)

    # pixels ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô mask (RGB)
    pixels = img_np[mask_bool]

    # dominant color + harmonies
    dom_rgb, dom_hex = dominant_color_from_masked_pixels(pixels, n_clusters=3)
    har = color_harmonies_from_rgb(dom_rgb)

    with st.container(border=True):
        st.markdown(f"**{name_th}**  ¬∑  *{name_en}*  ¬∑  conf={conf_i:.2f}")
        hex_chip(har["base"][1], "‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("**Complementary**")
            hex_chip(har["complementary"][1])
        with col2:
            st.markdown("**Analogous**")
            for _, hx in har["analogous"]:
                hex_chip(hx)
        with col3:
            st.markdown("**Triadic**")
            for _, hx in har["triadic"]:
                hex_chip(hx)

# ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ anotated
buf = io.BytesIO()
Image.fromarray(annot_rgb).save(buf, format="PNG")
st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (PNG)", data=buf.getvalue(), file_name="result.png", mime="image/png")

st.markdown('''<div class="footer">
<span style="font-size:1em;font-weight:600;color:#404040;">‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ Chanaphon Phetnoi</span><br>
<span style="font-size:0.95em;color:#404040;">‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 664230017 | ‡∏´‡πâ‡∏≠‡∏á 66/45</span><br>
<span style="font-size:0.95em;color:#404040;">‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®</span>
</div>''', unsafe_allow_html=True)
